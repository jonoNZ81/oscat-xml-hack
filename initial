FUNCTION_BLOCK DLOG_STORE_FILE_XML
VAR_IN_OUT
	X : DLOG_DATA;
END_VAR
VAR_INPUT
	ENABLE : BOOL;
	TRIG_M : BOOL;
	TRIG_T : UDINT;
	FILENAME : STRING;
	DTI : DT;
END_VAR
VAR_OUTPUT
	ERROR_C : DWORD;
	ERROR_T : BYTE;
END_VAR
VAR
	FS : FILE_SERVER;
	FSD : FILE_SERVER_DATA;
	PT : NETWORK_BUFFER;
	UCB : UNI_CIRCULAR_BUFFER;
	ra : BOOL;
	trig_m_last : BOOL;
	dti_last : DT := DT#2070-02-06-06:28:15;
	enable_last : BOOL;
	fn_last : STRING;
	str : STRING(OSCAT_BASIC.STRING_LENGTH);
	fn : STRING;
	init : BOOL;
	step: INT;
	idx : INT;
	log_state : USINT;
	n : INT;
END_VAR


X.DTI := DTI; (* Enter the date / time *)
IF DTI <> dti_last THEN
	X.CLOCK_TRIG := TRUE;
	dti_last := DTI;
	X.STORE_TYPE := 3;
ELSE
	X.CLOCK_TRIG := FALSE;
END_IF;

IF X.ADD_HEADER = FALSE THEN (* if add-header and add-data are pending at the same time, then add-data can be pending for one cycle longer *)
	X.ADD_DATA := FALSE;
END_IF;
X.ADD_HEADER := FALSE;

IF ENABLE THEN
	IF X.CLOCK_TRIG THEN
		fn := OSCAT_BASIC.DT_TO_STRF(DTI, 0, FILENAME, 0); (* automatic file name generation *)
		IF TRIG_T > 0 THEN (* automatic trigger *)
			ra := DT_TO_UDINT(DTI) MOD TRIG_T = 0;
		END_IF;
	ELSE
		ra := FALSE;
	END_IF;
	IF (TRIG_M AND NOT trig_m_last) OR ra OR X.ADD_DATA_REQ THEN (* manual, automatic or external trigger *)
		X.ADD_DATA := TRUE; (* Log data *)
	END_IF;
	IF NOT init THEN
		init := TRUE;
		X.ADD_HEADER := FALSE; (* Apply column headings *)
	END_IF;
END_IF;
X.ADD_DATA_REQ := FALSE; (* Reset external request *)

IF (NOT ENABLE AND enable_last) OR THEN (* Neg. Flanke ENABLE - Log Stop *)
	fn_last := fn;
	X.UCB.D_HEAD := WORD#16#FF00;
	X.UCB.D_MODE := 1;
	UCB(DATA:=X.UCB); (* Write element *)
	X.ADD_HEADER := FALSE; (* Apply column headings *)
END_IF;

CASE step OF

00:	IF ENABLE THEN
		fn_last := fn;
		FSD.FILENAME := fn; (* filename *)
		FSD.OFFSET := 0; (* Start at the beginning of the file *)
		FSD.AUTO_CLOSE := T#0s; (* Auto-Close *)
		step := 10;
	END_IF;

10:	(* Write header data *)
	str := '"<?xml version=""1.0""?>"<HydroTelImport><Data><Identifier>abc123</Identifier><DateTimeFormat>yyyy-mm-dd-hh:nn:ss</DateTimeFormat>';
	OSCAT_BASIC._STRING_TO_BUFFER(STR:=str, POS:=idx, PT:=ADR(PT.BUFFER), SIZE:=SIZEOF(PT.BUFFER));
	idx := idx + OSCAT_BASIC.LEN(str);
	step := 20;

20:	IF log_state = 254 THEN
		log_state := 255;
		str := '</Data></HydroTelImport>';
		OSCAT_BASIC._STRING_TO_BUFFER(STR:=str, POS:=idx, PT:=ADR(PT.BUFFER), SIZE:=SIZEOF(PT.BUFFER));
		idx := idx + OSCAT_BASIC.LEN(str);
		step := 40; (* Write data *)

	ELSIF X.UCB.BUF_COUNT > 0 THEN (* Entries available *)
		X.UCB.D_MODE := 10;
		UCB(DATA:=X.UCB); (* Read item, but do not remove it yet *)

		IF X.UCB.D_HEAD = WORD#16#FF00 THEN (* LOG_STOP Command *)
			X.UCB.D_MODE := 11;
			UCB(DATA:=X.UCB); (* Remove item *)
			log_state := 254;

		ELSIF idx + OSCAT_BASIC.LEN(X.UCB.D_STRING) + 120 < SIZEOF(PT) THEN (* Space for element? *)
			X.UCB.D_MODE := 11;
			UCB(DATA:=X.UCB); (* Remove item *)

			IF log_state = 0 THEN
				str := '<S><V>';
			ELSIF n = 1 THEN
				str := '<DT>';
			ELSE
				str := '<Q>';
			END_IF;

			OSCAT_BASIC._STRING_TO_BUFFER(STR:=str, POS:=idx, PT:=ADR(PT.BUFFER), SIZE:=SIZEOF(PT.BUFFER));
			idx := idx + OSCAT_BASIC.LEN(str);
			log_state := log_state + 1;

			OSCAT_BASIC._STRING_TO_BUFFER(STR:=X.UCB.D_STRING, POS:=idx, PT:=ADR(PT.BUFFER), SIZE:=SIZEOF(PT.BUFFER));
			idx := idx + OSCAT_BASIC.LEN(X.UCB.D_STRING);

			n := n + 1;

			IF n = X.ID_MAX THEN
				n := 0;
				str := '</Q></S>';
				log_state := 0;
			ELSIF n = 1 THEN
				str := '</V>';
			ELSE
				str := '</DT>';
			END_IF;
			OSCAT_BASIC._STRING_TO_BUFFER(STR:=str, POS:=idx, PT:=ADR(PT.BUFFER), SIZE:=SIZEOF(PT.BUFFER));
			idx := idx + OSCAT_BASIC.LEN(str);
		END_IF;
		step := 40; (* Write data *)
	END_IF;

40:	IF idx > 0 THEN (* Write data  *)
		FSD.MODE := 3; (* create + write *)
		PT.SIZE := idx; (* Enter data length *)
		idx := 0;
	END_IF;
	step := 60;

60:	IF FSD.MODE = 0 THEN
		IF log_state = 255 THEN
			log_state := 0;
			FSD.MODE := 5; (* Close file *)
			X.NEW_FILE := FSD.FILENAME;
			X.NEW_FILE_RTRIG := FALSE;
			step := 80;
		ELSE
			step := 20;
		END_IF;
	END_IF;

80:	IF FSD.MODE = 0 THEN (* Close file finished *)
		X.NEW_FILE_RTRIG := TRUE;
		step := 0;
	END_IF;

END_CASE;

trig_m_last := TRIG_M;
enable_last := ENABLE;
FS(FSD:=FSD,PT:=PT); (* FILE_SERVER *)

ERROR_C := FSD.ERROR;
ERROR_T := SEL(FSD.ERROR > 0,0,1);

(* revision history
ks	25. july. 2011	rev 1.0
	original version

*)
